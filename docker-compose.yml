version: '3.9'

networks:
  my_network:
    driver: bridge

services:
  api_gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./users_serv:/app/users_serv
    depends_on:
      - user_service
      - post_service
    environment:
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/proto
    networks:
      - my_network

  user_service:
    build:
      context: .
      dockerfile: users_serv/Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      - db
    environment:
      - FLASK_ENV=development
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/broker
    networks:
      - my_network

  post_service:
    build:
      context: .
      dockerfile: posts_serv/Dockerfile
    ports:
      - "50051:50051"
    depends_on:
      - db
    environment:
      - FLASK_ENV=development
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/proto:/app/broker
    networks:
      - my_network

  statistic_service:
    build:
      context: .
      dockerfile: statistic_serv/Dockerfile
    volumes:
      - ./proto:/app/proto
      - ./broker:/app/broker
    command: >
      sh -c "
        sleep 10;
        echo 'Waiting for ClickHouse...';
        while ! nc -z clickhouse 8123; do sleep 2; done;

        echo 'Creating ClickHouse tables...';
        python statistic_serv/init_clickhouse.py;

        echo 'Starting main statistics service...';
        python statistic_serv/main.py"
    ports:
      - "50052:50052"
    networks:
      - my_network
    depends_on:
      - clickhouse
      - kafka-init
    environment:
      - PYTHONPATH=/app:/app/proto:/app/broker
      - CLICKHOUSE_URL=clickhouse://default:password@clickhouse:8123/default

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: user_db,post_db
      TZ: Europe/Moscow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - my_network

  tests_api_gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    volumes:
      - ./api-gateway:/app/api-gateway
      - ./proto:/app/proto
      - ./users_serv:/app/users_serv
      - ./posts_serv:/app/posts_serv
    command: ["./api-gateway/wait-for-it.sh", "users_serv:5000", "--", "pytest", "tests/"]
    depends_on:
      - api_gateway
      - user_service
      - post_service
      - statistic_service
      - db
      - kafka
      - kafka-init
      - clickhouse
    environment:
      - FLASK_ENV=testing
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/proto:/app/posts_serv:/app/api-gateway:/app/broker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - my_network

  unit_tests_userv:
    build:
      context: .
      dockerfile: users_serv/Dockerfile
    volumes:
      - ./users_serv:/app
      - ./users_serv/tests:/app/tests
      - ./broker:/app/broker
    command: [ "pytest", "tests/" ]
    depends_on:
      - db
      - kafka
    environment:
      - FLASK_ENV=testing
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/broker
    networks:
      - my_network

  unit_tests_pserv:
    build:
      context: .
      dockerfile: posts_serv/Dockerfile
    volumes:
      - ./posts_serv:/app
      - ./posts_serv/tests:/app/tests
      - ./proto:/app/proto
      - ./broker:/app/broker
    command: [ "pytest", "tests/" ]
    depends_on:
      - db
      - kafka
    environment:
      - FLASK_ENV=testing
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/proto:/app/broker
    networks:
      - my_network

  unit_tests_sserv:
    build:
      context: .
      dockerfile: statistic_serv/Dockerfile
    volumes:
      - ./proto:/app/proto
      - ./broker:/app/broker
    command: [ "pytest", "statistic_serv/tests/" ]
    depends_on:
      - db
      - kafka
    environment:
      - FLASK_ENV=testing
      - TZ=Europe/Moscow
      - PYTHONPATH=/app:/app/proto:/app/broker
    networks:
      - my_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,state.change.logger=ERROR"
      KAFKA_LOG_HEAP_OPTS: "-Dlog4j.configuration=file:/etc/kafka/log4j.properties"
    volumes:
      - ./kafka/log4j.properties:/etc/kafka/log4j.properties
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 30s
      timeout: 5s
      retries: 10
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "2"
    networks:
      - my_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - my_network

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...';
        while ! kafka-topics --bootstrap-server kafka:9092 --list; do sleep 2; done;
        echo 'Creating topics...';
        kafka-topics --bootstrap-server kafka:9092 --create --topic post_views --partitions 1 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:9092 --create --topic post_likes --partitions 1 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:9092 --create --topic post_comments --partitions 1 --replication-factor 1;
        echo 'Topics created successfully';
      "
    networks:
      - my_network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: password
      CLICKHOUSE_DB: default
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - my_network

volumes:
  postgres_data: